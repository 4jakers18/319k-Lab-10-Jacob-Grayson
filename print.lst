


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; SSD1306_OutChar   outputs a single 8-bit ASCII charact
                       er
   10 00000000         ; SSD1306_OutString outputs a null-terminated string 
   11 00000000         ; SSD1306_OutString outputs a null-terminated string 
   12 00000000         
   13 00000000                 IMPORT           SSD1306_OutChar
   14 00000000                 IMPORT           SSD1306_OutString
   15 00000000                 EXPORT           LCD_OutDec
   16 00000000                 EXPORT           LCD_OutFix
   17 00000000                 PRESERVE8
   18 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   19 00000000                 THUMB
   20 00000000 00000004 
                       N       EQU              4
   21 00000000 00000000 
                       CNT     EQU              0
   22 00000000        B 
                       FP      RN               R11         ; frame pointer
   23 00000000         
   24 00000000         
   25 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   26 00000000         ; Output a 32-bit number in unsigned decimal format
   27 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   28 00000000         ; Output: none
   29 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   30 00000000         LCD_OutDec
   31 00000000         ;INIT 1
   32 00000000 E92D 0801       PUSH{R11,        R0}
   33 00000004 B081            SUB              SP, #4      ; making space for 
                                                            CNT, #4 for 4 bytes
                                                             = 32 bits
   34 00000006 46EB            MOV              FP, SP      ; frame pointer = s
                                                            tack pointer
   35 00000008         ;INIT 2
   36 00000008 B500            PUSH{LR}
   37 0000000A F04F 0100       MOV              R1, #0
   38 0000000E F8CB 1000       STR              R1, [FP, #CNT] ; making CNT = 0
                                                            
   39 00000012 F04F 020A       MOV              R2, #10
   40 00000016         Read_Loop
   41 00000016 F8DB 1000       LDR              R1, [FP, #CNT] ; reading count
   42 0000001A F101 0101       ADD              R1, #1      ; incrementing coun
                                                            t
   43 0000001E F8CB 1000       STR              R1, [FP, #CNT] ; storing count
   44 00000022 F8DB 1004       LDR              R1, [FP, #N] ; reading N which 



ARM Macro Assembler    Page 2 


                                                            is NUM
   45 00000026 460B            MOV              R3, R1      ; making copy of N 
                                                            into R3
   46 00000028 FBB1 F1F2       UDIV             R1, R1, R2  ; R1 = N/10
   47 0000002C F8CB 1004       STR              R1, [FP, #N] ; storing n/10 as 
                                                            new N
   48 00000030 FB01 F102       MUL              R1, R1, R2
   49 00000034 EBA3 0301       SUB              R3, R3, R1  ; R3 = R3-R1
   50 00000038 B081            SUB              SP, #4      ; decrementing stac
                                                            k pointer one posit
                                                            ion
   51 0000003A 9300            STR              R3, [SP]    ; storing differenc
                                                            e into stack
   52 0000003C F8DB 1004       LDR              R1, [FP, #N] ; load new N value
                                                            
   53 00000040 2900            CMP              R1, #0      ; is new N = 0
   54 00000042 D1E8            BNE              Read_Loop   ; No? loop back to 
                                                            read loop. Yes? Con
                                                            tinue.
   55 00000044         Write_Loop
   56 00000044 9800            LDR              R0, [SP]
   57 00000046 B001            ADD              SP, #4      ; incrementing stac
                                                            k pointer one posit
                                                            ion
   58 00000048 F100 0030       ADD              R0, #0x30   ; adding 0x30 to ge
                                                            t ASCII value
   59 0000004C F7FF FFFE       BL               SSD1306_OutChar
   60 00000050 F8DB 1000       LDR              R1, [FP, #CNT] ; loading count 
                                                            into R1
   61 00000054 F1A1 0101       SUB              R1, #1      ; decrementing coun
                                                            t
   62 00000058 F8CB 1000       STR              R1, [FP, #CNT] ; storing CNT fr
                                                            om R1
   63 0000005C 2900            CMP              R1, #0      ; is CNT(R1) greate
                                                            r than 0?
   64 0000005E D1F1            BNE              Write_Loop  ; Yes? Loop back to
                                                             write loop 
   65 00000060         ;No? Continue
   66 00000060 F85D EB04       POP{LR}
   67 00000064 B002            ADD              SP, #8
   68 00000066 F85D BB04       POP{R11}
   69 0000006A         
   70 0000006A         
   71 0000006A 4770            BX               LR
   72 0000006C         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   73 0000006C         
   74 0000006C         ; -----------------------LCD _OutFix--------------------
                       --
   75 0000006C         ; Output characters to LCD display in fixed-point format
                       
   76 0000006C         ; unsigned decimal, resolution 0.01, range 0.00 to 9.99
   77 0000006C         ; Inputs:  R0 is an unsigned 32-bit number
   78 0000006C         ; Outputs: none
   79 0000006C         ; E.g., R0=0,    then output "0.00 "
   80 0000006C         ;       R0=3,    then output "0.03 "
   81 0000006C         ;       R0=89,   then output "0.89 "
   82 0000006C         ;       R0=123,  then output "1.23 "
   83 0000006C         ;       R0=999,  then output "9.99 "
   84 0000006C         ;       R0>999,  then output "*.** "



ARM Macro Assembler    Page 3 


   85 0000006C         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   86 0000006C         LCD_OutFix
   87 0000006C         ;INIT 1
   88 0000006C E92D 0801       PUSH{R11,        R0}
   89 00000070 B081            SUB              SP, #4      ; making space for 
                                                            CNT
   90 00000072 46EB            MOV              FP, SP      ; frame pointer = s
                                                            tack pointer
   91 00000074         ;INIT 2
   92 00000074 B500            PUSH{LR}
   93 00000076 F04F 0100       MOV              R1, #0
   94 0000007A F8CB 1000       STR              R1, [FP, #CNT] ; making CNT = 0
                                                            
   95 0000007E F04F 020A       MOV              R2, #10
   96 00000082         
   97 00000082 F8DB 3004       LDR              R3, [FP, #N] 
                                                            ; loading N into R3
                                                            
   98 00000086 F5B3 7F7A       CMP              R3, #1000   ; is N < 1000?
   99 0000008A D310            BLO              InRange     ; Yes? jump to InRa
                                                            nge
  100 0000008C         ;No? Continue
  101 0000008C         ;Output for out of range nums: *.**
  102 0000008C F04F 002A       MOV              R0, #0x2A   ; R0 = *
  103 00000090 F7FF FFFE       BL               SSD1306_OutChar
  104 00000094 F04F 002E       MOV              R0, #0x2E   ; R0 = .
  105 00000098 F7FF FFFE       BL               SSD1306_OutChar
  106 0000009C F04F 002A       MOV              R0, #0x2A   ; R0 = *
  107 000000A0 F7FF FFFE       BL               SSD1306_OutChar
  108 000000A4 F04F 002A       MOV              R0, #0x2A   ; R0 = *
  109 000000A8 F7FF FFFE       BL               SSD1306_OutChar
  110 000000AC E02C            B                Exit
  111 000000AE         InRange
  112 000000AE F8DB 1000       LDR              R1, [FP, #CNT] ; reading count
  113 000000B2 F101 0101       ADD              R1, #1      ; incrementing coun
                                                            t
  114 000000B6 F8CB 1000       STR              R1, [FP, #CNT] ; storing count
  115 000000BA F8DB 1004       LDR              R1, [FP, #N] ; loading N
  116 000000BE 460B            MOV              R3, R1      ; making copy of N 
                                                            into R3
  117 000000C0 FBB1 F1F2       UDIV             R1, R1, R2  ; R1 = N/10
  118 000000C4 F8CB 1004       STR              R1, [FP, #N] ; Storing N/10 as 
                                                            new N
  119 000000C8 FB01 F102       MUL              R1, R1, R2
  120 000000CC EBA3 0301       SUB              R3, R3, R1  ; R3 = R3 - R1
  121 000000D0 B081            SUB              SP, #4      ; decrementing stac
                                                            k pinter one positi
                                                            on
  122 000000D2 9300            STR              R3, [SP]    ; storing differenc
                                                            e into stack
  123 000000D4 F8DB 1000       LDR              R1, [FP, #CNT] ; loading count
  124 000000D8 2903            CMP              R1, #3      ;compare count to 3
                                                            
  125 000000DA D3E8            BLO              InRange     ; Less than? Loop t
                                                            o InRange
  126 000000DC         ;No? Continue
  127 000000DC 9800            LDR              R0, [SP]
  128 000000DE B001            ADD              SP, #4      ; incrementing stac



ARM Macro Assembler    Page 4 


                                                            k pointer one posit
                                                            ion
  129 000000E0 F100 0030       ADD              R0, #0x30   ; adding 0x30 to ge
                                                            t ASCII value
  130 000000E4 F7FF FFFE       BL               SSD1306_OutChar
  131 000000E8 F04F 002E       MOV              R0, #0x2E   ; outputting a deci
                                                            mal 
  132 000000EC F7FF FFFE       BL               SSD1306_OutChar
  133 000000F0 9800            LDR              R0, [SP]
  134 000000F2 B001            ADD              SP, #4
  135 000000F4 F100 0030       ADD              R0, #0x30
  136 000000F8 F7FF FFFE       BL               SSD1306_OutChar
  137 000000FC 9800            LDR              R0, [SP]
  138 000000FE B001            ADD              SP, #4
  139 00000100 F100 0030       ADD              R0, #0x30
  140 00000104 F7FF FFFE       BL               SSD1306_OutChar
  141 00000108         Exit
  142 00000108 F85D EB04       POP{LR}
  143 0000010C B002            ADD              SP, #8
  144 0000010E F85D BB04       POP{R11}
  145 00000112         
  146 00000112 4770            BX               LR
  147 00000114         
  148 00000114                 ALIGN
  149 00000114         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  150 00000114         
  151 00000114                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  152 00000114                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Lab10 -I"C:\Users\Grayson Drinkard\
AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include" -I"C:\Users\Grayson
 Drinkard\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123" -
-predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 533" --predefine
="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --
list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 18 in file Print.s
   Uses
      None
Comment: .text unused
Exit 00000108

Symbol: Exit
   Definitions
      At line 141 in file Print.s
   Uses
      At line 110 in file Print.s
Comment: Exit used once
InRange 000000AE

Symbol: InRange
   Definitions
      At line 111 in file Print.s
   Uses
      At line 99 in file Print.s
      At line 125 in file Print.s

LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 30 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000006C

Symbol: LCD_OutFix
   Definitions
      At line 86 in file Print.s
   Uses
      At line 16 in file Print.s
Comment: LCD_OutFix used once
Read_Loop 00000016

Symbol: Read_Loop
   Definitions
      At line 40 in file Print.s
   Uses
      At line 54 in file Print.s
Comment: Read_Loop used once
Write_Loop 00000044

Symbol: Write_Loop
   Definitions
      At line 55 in file Print.s
   Uses
      At line 64 in file Print.s
Comment: Write_Loop used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

CNT 00000000

Symbol: CNT
   Definitions
      At line 21 in file Print.s
   Uses
      At line 38 in file Print.s
      At line 41 in file Print.s
      At line 43 in file Print.s
      At line 60 in file Print.s
      At line 62 in file Print.s
      At line 94 in file Print.s
      At line 112 in file Print.s
      At line 114 in file Print.s
      At line 123 in file Print.s

N 00000004

Symbol: N
   Definitions
      At line 20 in file Print.s
   Uses
      At line 44 in file Print.s
      At line 47 in file Print.s
      At line 52 in file Print.s
      At line 97 in file Print.s
      At line 115 in file Print.s
      At line 118 in file Print.s

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SSD1306_OutChar 00000000

Symbol: SSD1306_OutChar
   Definitions
      At line 13 in file Print.s
   Uses
      At line 59 in file Print.s
      At line 103 in file Print.s
      At line 105 in file Print.s
      At line 107 in file Print.s
      At line 109 in file Print.s
      At line 130 in file Print.s
      At line 132 in file Print.s
      At line 136 in file Print.s
      At line 140 in file Print.s

SSD1306_OutString 00000000

Symbol: SSD1306_OutString
   Definitions
      At line 14 in file Print.s
   Uses
      None
Comment: SSD1306_OutString unused
2 symbols
345 symbols in table
